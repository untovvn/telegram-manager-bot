
"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–æ–º (FSM)
–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∏–∞–ª–æ–≥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
"""
import asyncio
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards import start_kb, yes_no_kb, location_ipo_kb, house_choice_kb
from message_map import MessageMap
from notification_service import NotificationService, build_manager_message
from states import Form
from user_session import UserSession


async def _send_manager_card_if_needed(
    message: Message,
    state: FSMContext,
    bot: Bot,
    notification_service: NotificationService,
    message_map: MessageMap
) -> None:
    """
    –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
    –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É ID —Å–æ–æ–±—â–µ–Ω–∏—è
    –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    """
    data = await state.get_data()
    if not data.get("card_sent"):
        user = message.from_user
        if user and user.id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            card = await bot.send_message(
                notification_service.manager_chat_id,
                build_manager_message(user)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –∏—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            message_map.add(card.message_id, user.id)
            # –ü–æ–º–µ—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            await state.update_data(card_sent=True)


async def stop_chain_and_call_manager(
    message: Message,
    state: FSMContext,
    user_session: UserSession
) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π FSM –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.

    - –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await message.answer(
        "–ó–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        reply_markup=ReplyKeyboardRemove()
    )
    if message.from_user and message.from_user.id:
        user_session.set_active_user(message.from_user.id)
    else:
        # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –Ω–æ –ª—É—á—à–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.")


async def send_welcome(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.clear()
    text = (
        "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?\n"
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã –Ø —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–∞ @–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –ù–ê–ß–ê–¢–¨ –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôå"
    )
    await message.answer(text, reply_markup=start_kb)
    await state.set_state(Form.waiting_for_start)


async def process_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å". –ó–∞–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    user_name = message.from_user.first_name if message.from_user else "–¥—Ä—É–≥"
    text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è\n\n"
        "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ –Ω–∞—à–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö –¥–æ–º–∞—Ö?"
    )
    await message.answer(text, reply_markup=yes_no_kb)
    await state.set_state(Form.waiting_for_houses)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
    asyncio.create_task(
        wait_for_reply(message.chat.id, state, Form.waiting_for_houses, 300, send_second_reminder, message.bot)
    )


async def process_houses(
    message: Message,
    state: FSMContext,
    user_session: UserSession,
    notification_service: NotificationService,
    message_map: MessageMap,
    bot: Bot
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–º–∞—Ö.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM.
    """
    await _send_manager_card_if_needed(message, state, bot, notification_service, message_map)
    await stop_chain_and_call_manager(message, state, user_session)


async def process_questions(
    message: Message,
    state: FSMContext,
    user_session: UserSession,
    notification_service: NotificationService,
    message_map: MessageMap,
    bot: Bot
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ª–æ–∫–∞—Ü–∏–∏/–∏–ø–æ—Ç–µ–∫–µ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM.
    """
    await _send_manager_card_if_needed(message, state, bot, notification_service, message_map)
    await stop_chain_and_call_manager(message, state, user_session)


async def process_house_choice(
    message: Message,
    state: FSMContext,
    user_session: UserSession,
    notification_service: NotificationService,
    message_map: MessageMap,
    bot: Bot
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –¥–æ–º–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM.
    """
    await _send_manager_card_if_needed(message, state, bot, notification_service, message_map)
    await stop_chain_and_call_manager(message, state, user_session)


async def wait_for_reply(
    chat_id: int,
    state: FSMContext,
    expected_state: Form,
    timeout: int,
    callback,
    bot: Bot
) -> None:
    """

    –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ `timeout` —Å–µ–∫—É–Ω–¥.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å,
    –≤—ã–∑—ã–≤–∞–µ—Ç `callback` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    await asyncio.sleep(timeout)
    current_state = await state.get_state()
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ –µ—â–µ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –∂–¥–∞–ª–∏, –∑–Ω–∞—á–∏—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
    if current_state == expected_state.state:
        await callback(chat_id, state, bot)


async def send_second_reminder(chat_id: int, state: FSMContext, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç
    –µ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ FSM.
    """
    user = await bot.get_chat(chat_id)
    user_name = user.first_name or "–¥—Ä—É–≥"
    text = (
        f"{user_name}, –º–æ–∂–µ—Ç –±—ã—Ç—å —É –≤–∞—Å —É–∂–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã? "
        "–ù–∞–ø—Ä–∏–ºÔøΩÔøΩ—Ä, –ø—Ä–æ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏?"
    )
    await bot.send_message(chat_id, text, reply_markup=location_ipo_kb)
    await state.set_state(Form.waiting_for_questions)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    asyncio.create_task(
        wait_for_reply(chat_id, state, Form.waiting_for_questions, 300, send_third_reminder, bot)
    )


async def send_third_reminder(chat_id: int, state: FSMContext, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ—Ç—å–µ, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
    –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–∞.
    """
    text = (
        "–° –ø–ª–∞—Ç–µ–∂–æ–º 55 190 —Ä—É–± –Ω–∞ –≤–µ—Å—å —Å—Ä–æ–∫ —É –Ω–∞—Å –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ç–æ–≤—ã–π –¥–æ–º. "
        "–í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–ª–æ—â–∞–¥—å –ø–æ–±–æ–ª—å—à–µ?"
    )
    photo_url = "https://i.imgur.com/4M34hi2.jpg"
    await bot.send_photo(chat_id, photo=photo_url, caption=text, reply_markup=house_choice_kb)
    await state.set_state(Form.waiting_for_house_choice)
 