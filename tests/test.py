import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
try:
    from dotenv import load_dotenv
except ImportError:
    raise ImportError('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç python-dotenv: pip install python-dotenv')

# pip install python-dotenv
load_dotenv()
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    raise ValueError('TELEGRAM_BOT_TOKEN is not set in the environment variables!')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

CHANNEL_NAME = "@–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞"  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_start = State()
    waiting_for_houses = State()
    waiting_for_questions = State()
    waiting_for_house_choice = State()
    stopped = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("–ù–∞—á–∞—Ç—å"))

yes_no_kb = ReplyKeyboardMarkup(resize_keyboard=True)
yes_no_kb.add(KeyboardButton("–î–ê"), KeyboardButton("–ù–ï–¢"))

location_ipo_kb = ReplyKeyboardMarkup(resize_keyboard=True)
location_ipo_kb.add(KeyboardButton("–£–∑–Ω–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é"), KeyboardButton("–£–∑–Ω–∞—Ç—å –ø—Ä–æ –∏–ø–æ—Ç–µ–∫—É"))

house_choice_kb = ReplyKeyboardMarkup(resize_keyboard=True)
house_choice_kb.add(KeyboardButton("–ü–æ–¥—Ö–æ–¥–∏—Ç"), KeyboardButton("–ê –∫–∞–∫–∏–µ –µ—â–µ –µ—Å—Ç—å –¥–æ–º–∞?"))

# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    text = (
        "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?\n"
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã –Ø —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–∞ {channel}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –ù–ê–ß–ê–¢–¨ –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôå"
    ).format(channel=CHANNEL_NAME)
    await message.answer(text, reply_markup=start_kb)
    await Form.waiting_for_start.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@dp.message_handler(Text(equals="–ù–∞—á–∞—Ç—å"), state=Form.waiting_for_start)
async def process_start(message: types.Message, state: FSMContext):
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è\n\n"
        "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ –Ω–∞—à–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö –¥–æ–º–∞—Ö?"
    )
    await message.answer(text, reply_markup=yes_no_kb)
    await Form.waiting_for_houses.set()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
    asyncio.create_task(wait_for_reply(message.chat.id, state, Form.waiting_for_houses, 300, send_second_reminder))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –î–ê/–ù–ï–¢ –∏ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(state=Form.waiting_for_houses)
async def process_houses(message: types.Message, state: FSMContext):
    await stop_chain_and_call_manager(message, state)

# –í—Ç–æ—Ä–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
async def send_second_reminder(chat_id, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()
    if current_state == Form.waiting_for_houses.state:
        user = await bot.get_chat(chat_id)
        user_name = user.first_name or "–¥—Ä—É–≥"
        text = (
            f"{user_name}, –º–æ–∂–µ—Ç –±—ã—Ç—å —É –≤–∞—Å —É–∂–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã? "
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏?"
        )
        await bot.send_message(chat_id, text, reply_markup=location_ipo_kb)
        await Form.waiting_for_questions.set()
        asyncio.create_task(wait_for_reply(chat_id, state, Form.waiting_for_questions, 300, send_third_reminder))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–ø–µ
@dp.message_handler(state=Form.waiting_for_questions)
async def process_questions(message: types.Message, state: FSMContext):
    await stop_chain_and_call_manager(message, state)

# –¢—Ä–µ—Ç—å—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —á–µ—Ä–µ–∑ –µ—â–µ 5 –º–∏–Ω—É—Ç
async def send_third_reminder(chat_id, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()
    if current_state == Form.waiting_for_questions.state:
        text = (
            "–° –ø–ª–∞—Ç–µ–∂–æ–º 55 190 —Ä—É–± –Ω–∞ –≤–µ—Å—å —Å—Ä–æ–∫ —É –Ω–∞—Å –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ç–æ–≤—ã–π –¥–æ–º. "
            "–í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–ª–æ—â–∞–¥—å –ø–æ–±–æ–ª—å—à–µ?"
        )
        photo_url = "https://i.imgur.com/4M34hi2.jpg"  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –¥–æ–º–∞
        await bot.send_photo(chat_id, photo=photo_url, caption=text, reply_markup=house_choice_kb)
        await Form.waiting_for_house_choice.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–ø–µ
@dp.message_handler(state=Form.waiting_for_house_choice)
async def process_house_choice(message: types.Message, state: FSMContext):
    await stop_chain_and_call_manager(message, state)

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ø–æ—á–∫–∏ –∏ –≤—ã–∑–æ–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async def stop_chain_and_call_manager(message: types.Message, state: FSMContext):
    await state.set_state(Form.stopped.state)
    await message.answer(
        "–ó–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def wait_for_reply(chat_id, state: FSMContext, expected_state, timeout, callback):
    await asyncio.sleep(timeout)
    current_state = await state.get_state()
    if current_state == expected_state.state:
        await callback(chat_id, state)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
